version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.7.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-network
    ports:
      - "2181:2181"

  kafka-1:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka-1
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3  # Replicate across multiple brokers
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3  # For exactly-once semantics
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2  # Minimum in-sync replicas
    networks:
      - kafka-network
    ports:
      - "9092:9092"

  kafka-2:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka-2
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    networks:
      - kafka-network
    ports:
      - "9093:9093"

  kafka-3:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka-3
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    networks:
      - kafka-network
    ports:
      - "9094:9094"

  kafka-4:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka-4
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 4
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-4:9095
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    networks:
      - kafka-network
    ports:
      - "9095:9095"

  kafka-5:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka-5
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 5
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-5:9096
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
    networks:
      - kafka-network
    ports:
      - "9096:9096"

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - kafka-4
      - kafka-5
    ports:
      - "8080:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-1:9092,kafka-2:9093,kafka-3:9094,kafka-4:9095,kafka-5:9096
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - kafka-network

  view-logs-kafka-producer:
    image: view-logs-kafka-producer
    container_name: view-logs-kafka-producer-container
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - kafka-4
      - kafka-5
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-1:9092,kafka-2:9093,kafka-3:9094,kafka-4:9095,kafka-5:9096
    networks:
      - kafka-network
    ports:
      - "8081:8080"  # Expose Spring Boot app port

  view-log-reporting:
    image: view-log-reporting
    container_name: view-log-reporting-container
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
      - kafka-4
      - kafka-5
    environment:
      SPRING_PROFILES_ACTIVE: "dev"
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka-1:9092,kafka-2:9093,kafka-3:9094,kafka-4:9095,kafka-5:9096
      OUTPUT_PATH: "/app/output"  # Define output path inside the container
    volumes:
      - /tmp/view-log-reporting-output/:/app/output
    networks:
      - kafka-network
    ports:
      - "8082:8080"  # Expose Spring Boot app port

networks:
  kafka-network:
    driver: bridge
